import CommandWithRedirectFromFilepath from '../common/classes/command-with-redirect-from-filepath';
import CommandWithRedirectToFilepath   from '../common/classes/command-with-redirect-to-filepath';
import CommandWithReturnedData         from '../common/classes/command-with-returned-data';
import Command                         from '../common/classes/command';
import { EmptySchema, SchemaIds }      from '../common/constants/schemas';

import {
  Empty,
  GlobalOptions,
  GlobalOptionsWithRequiredFilePath
} from '../common/interfaces/common';

import { RuleAddOptions }            from './rule/add.interfaces';
import { RuleAddSchema }             from './rule/add.schema';
import { RuleInfo, RuleShowOptions } from './rule/show.interfaces';
import { RuleShowSchema }            from './rule/show.schema';

/**
 * Insert a new rule.
 *
 * Warning: Changes to the RPDB made with these commands do not become active immediately.
 * It is assumed that after a script finishes a batch of updates, it flushes the routing cache with
 * `ip route flush cache`.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function add(options: RuleAddOptions,
                          globalOptions: GlobalOptions = {}): Promise<Command<RuleAddOptions>> {

  const cmd = [ 'ip', 'rule', 'add' ];

  const ipCmd = new Command<RuleAddOptions>(
    SchemaIds.RuleAdd,
    RuleAddSchema,
    options,
    globalOptions,
    cmd);

  return await ipCmd.exec();
}

/**
 * Delete a rule.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function del(options: RuleAddOptions,
                          globalOptions: GlobalOptions = {}): Promise<Command<RuleAddOptions>> {

  const cmd = [ 'ip', 'rule', 'delete' ];

  const ipCmd = new Command<RuleAddOptions>(
    SchemaIds.RuleAdd,
    RuleAddSchema,
    options,
    globalOptions,
    cmd);

  return await ipCmd.exec();
}

/**
 * Save rule configuration into a file.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function save(globalOptions: GlobalOptionsWithRequiredFilePath): Promise<Command<Empty>> {

  const cmd = [ 'ip', 'rule', 'save' ];

  const ipCmd = new CommandWithRedirectToFilepath<Empty>(
    SchemaIds.Empty,
    EmptySchema,
    {},
    globalOptions,
    cmd);

  return await ipCmd.exec();
}

/**
 * Restore rule configuration from a file previously generated by {@link save}.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function restore(globalOptions: GlobalOptionsWithRequiredFilePath): Promise<Command<Empty>> {

  const cmd = [ 'ip', 'rule', 'restore' ];

  const ipCmd = new CommandWithRedirectFromFilepath<Empty>(
    SchemaIds.Empty,
    EmptySchema,
    {},
    globalOptions,
    cmd);

  return await ipCmd.exec();
}

/**
 * Deletes all rules.
 *
 * Warning: Changes to the RPDB made with these commands do not become active immediately.
 * It is assumed that after a script finishes a batch of updates, it flushes the routing cache with
 * `ip route flush cache`.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function flush(globalOptions: GlobalOptions = {}): Promise<Command<Empty>> {
  const cmd = [ 'ip', 'rule', 'flush' ];

  const ipCmd = new Command<Empty>(
    SchemaIds.Empty,
    EmptySchema,
    {},
    globalOptions,
    cmd);

  return await ipCmd.exec();
}

/**
 * Shows installed rules.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
export async function show(options: RuleShowOptions     = {},
                           globalOptions: GlobalOptions = {}): Promise<Command<RuleShowOptions> | RuleInfo[]> {

  const cmd = [ 'ip', 'rule', 'show' ];

  const ipCmd = new CommandWithReturnedData<RuleShowOptions>(
    SchemaIds.RuleShow,
    RuleShowSchema,
    options,
    {
      ...globalOptions,
      // Overrides for a better show.
      '-details':    true,
      '-statistics': true,
      '-json':       true
    },
    cmd);

  return await ipCmd.exec<RuleInfo[]>();
}

export default {
  add,
  del,
  save,
  restore,
  flush,
  show,
  list: show
};