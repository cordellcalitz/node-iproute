"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.show = exports.flush = exports.restore = exports.save = exports.del = exports.add = void 0;
const command_with_redirect_from_filepath_1 = __importDefault(require("../common/classes/command-with-redirect-from-filepath"));
const command_with_redirect_to_filepath_1 = __importDefault(require("../common/classes/command-with-redirect-to-filepath"));
const command_with_returned_data_1 = __importDefault(require("../common/classes/command-with-returned-data"));
const command_1 = __importDefault(require("../common/classes/command"));
const schemas_1 = require("../common/constants/schemas");
const add_schema_1 = require("./rule/add.schema");
const show_schema_1 = require("./rule/show.schema");
/**
 * Insert a new rule.
 *
 * Warning: Changes to the RPDB made with these commands do not become active immediately.
 * It is assumed that after a script finishes a batch of updates, it flushes the routing cache with
 * `ip route flush cache`.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 *
 * @example
 *
 * Import module
 * ```
 * import { rule } from 'iproute';
 * ```
 *
 * Unicast type rule (the default if not specified)
 * ```
 * await rule.add({
 *   from:	      '192.203.80.0/24',
 *   table:	  300,
 *   preference: 220
 * });
 * ```
 *
 * NAT type rule
 * ```
 * await rule.add({
 *   from:	        '193.233.7.83',
 *   table:	    1,
 *   preference:   320,
 *   nat:		    '192.203.80.144'
 * });
 * ```
 */
function add(options, globalOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'add'];
        const ipCmd = new command_1.default(schemas_1.SchemaIds.RuleAdd, add_schema_1.RuleAddSchema, options, globalOptions, cmd);
        return yield ipCmd.exec();
    });
}
exports.add = add;
/**
 * Delete a rule.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 *
 * @example
 *
 * Import module
 * ```
 * import { rule } from 'iproute';
 * ```
 *
 * Delete the unused default rule
 * ```
 * await rule.del({
 *   preference: 32767
 * });
 * ```
 */
function del(options, globalOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'delete'];
        const ipCmd = new command_1.default(schemas_1.SchemaIds.RuleAdd, add_schema_1.RuleAddSchema, options, globalOptions, cmd);
        return yield ipCmd.exec();
    });
}
exports.del = del;
/**
 * Save rule configuration into a file.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
function save(globalOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'save'];
        const ipCmd = new command_with_redirect_to_filepath_1.default(schemas_1.SchemaIds.Empty, schemas_1.EmptySchema, {}, globalOptions, cmd);
        return yield ipCmd.exec();
    });
}
exports.save = save;
/**
 * Restore rule configuration from a file previously generated by {@link save}.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 */
function restore(globalOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'restore'];
        const ipCmd = new command_with_redirect_from_filepath_1.default(schemas_1.SchemaIds.Empty, schemas_1.EmptySchema, {}, globalOptions, cmd);
        return yield ipCmd.exec();
    });
}
exports.restore = restore;
/**
 * Deletes all rules.
 *
 * Warning: Changes to the RPDB made with these commands do not become active immediately.
 * It is assumed that after a script finishes a batch of updates, it flushes the routing cache with
 * `ip route flush cache`.
 *
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 *
 * @example
 *
 * Import module
 * ```
 * import { rule } from 'iproute';
 * ```
 *
 * Flush the rules
 * ```
 * await rule.flush();
 * ```
 */
function flush(globalOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'flush'];
        const ipCmd = new command_1.default(schemas_1.SchemaIds.Empty, schemas_1.EmptySchema, {}, globalOptions, cmd);
        return yield ipCmd.exec();
    });
}
exports.flush = flush;
/**
 * Shows installed rules.
 *
 * @param options        - Parameters options to be passed down to `ip`.
 * @param globalOptions  - Global parameters options that affects the command execution.
 *
 * @throws {@link ParametersError} - Throws when passed parameters are invalid.
 * @throws {@link CommandError}    - Throws when the executed command fails.
 *
 * @example
 *
 * Import module
 * ```
 * import { rule } from 'iproute';
 * ```
 *
 * Show all rules
 * ```
 * const rules = await rule.show();
 * ```
 */
function show(options = {}, globalOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ['ip', 'rule', 'show'];
        const ipCmd = new command_with_returned_data_1.default(schemas_1.SchemaIds.RuleShow, show_schema_1.RuleShowSchema, options, Object.assign(Object.assign({}, globalOptions), { 
            // Overrides for a better show.
            '-details': true, '-statistics': true, '-json': true }), cmd);
        return yield ipCmd.exec();
    });
}
exports.show = show;
exports.default = {
    add,
    del,
    save,
    restore,
    flush,
    show,
    list: show
};
//# sourceMappingURL=rule.js.map